@page
@model WellnessSite.Pages.Admin.Services.IndexModel

@{
    ViewData["Title"] = "Modify Services List";
    ViewData["Prefs"] = Model.p.ToString();
}
<div class="row">
    <div class="col-md-3 col-1"></div>
    <div class="col-md-6 col-10">
        <div class="centre"><h1>Services</h1></div>
        <div class="centre">
            <form method="post">
            <div class="form-group">
                    <input asp-for="qry" plaeholder="Search" class="input-box"/>
                    <input type="submit" asp-route-qry="@Model.qry" value="Search" class="btn btn-info">
                    <a asp-page="./Index" class="btn btn-info">View all</a>
                </div>
            </form>
        </div>
    </div>
    <div class="col-md-3 col-1"></div>
</div>
<p>
    <a class="btn btn-info text-center" asp-page="Create">Create New Service Page</a>
</p>
    @if((await Model._um.IsInRoleAsync(await Model._um.GetUserAsync(User), "OrgAdmin") && !await Model._um.IsInRoleAsync(await Model._um.GetUserAsync(User), "Admin")))
    { <!-- Made it so OrgAdmins are notified about needing to wait for approval on services -->
        <p>All new services require admin approval before they appear in the published services list.</p>
        <p>Those awaiting approval have an unticked box, those approved show a ticked box and those declined will be removed.</p>
    }
 
<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Service[0].Name)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Service[0].Category)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Service[0].Description)
            </th>
                @if ((await Model._um.IsInRoleAsync(await Model._um.GetUserAsync(User), "OrgAdmin") && !await Model._um.IsInRoleAsync(await Model._um.GetUserAsync(User), "Admin")))
            { <!-- OrgAdmin only see this, shows approval status of their service-->
                <th>
                    @Html.DisplayNameFor(model => model.Service[0].Accepted)
                </th>
            }
            <th></th>
        </tr>
    </thead>
    <tbody>
        @{
            int i = 0;
            foreach (var item in Model.Service)
            {
                i++;
                <!-- Would be really nice to figure out how to lmit records shown to 35ish and use pagination of some kind to get more-->
                <tr class="table-row-@(i % 2)">
                    <td>
                        @Html.DisplayFor(modelItem => item.Name)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Category)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Description)
                    </td>

                    @if ((await Model._um.IsInRoleAsync(await Model._um.GetUserAsync(User), "OrgAdmin") && !await Model._um.IsInRoleAsync(await Model._um.GetUserAsync(User), "Admin")))
                    {
                        <td>
                            @Html.DisplayFor(modelItem => item.Accepted)
                        </td>
                    }
                    <td>
                        <p>
                            <a asp-page="./Edit" asp-route-id="@item.Id" class="btn btn-colour btn-service">Edit</a>
                        </p>
                        <p>
                            <a asp-page="./Details" asp-route-id="@item.Id" class="btn btn-colour btn-service">Details</a>
                        </p>
                        <p>
                            <a asp-page="./Delete" asp-route-id="@item.Id" class="btn btn-colour btn-service">Delete</a>
                        </p>
                    </td>
                </tr>
            }
        }
    </tbody>
</table>
